//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RuleCondition.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RuleConditionParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public interface IRuleConditionListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStart([NotNull] RuleConditionParser.StartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStart([NotNull] RuleConditionParser.StartContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAtom</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAtom([NotNull] RuleConditionParser.ExprAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAtom</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAtom([NotNull] RuleConditionParser.ExprAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprOr([NotNull] RuleConditionParser.ExprOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprOr([NotNull] RuleConditionParser.ExprOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprNot</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNot([NotNull] RuleConditionParser.ExprNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNot</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNot([NotNull] RuleConditionParser.ExprNotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprMul([NotNull] RuleConditionParser.ExprMulContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprMul([NotNull] RuleConditionParser.ExprMulContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprPar</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprPar([NotNull] RuleConditionParser.ExprParContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPar</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprPar([NotNull] RuleConditionParser.ExprParContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAdd([NotNull] RuleConditionParser.ExprAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAdd([NotNull] RuleConditionParser.ExprAddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAnd([NotNull] RuleConditionParser.ExprAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAnd([NotNull] RuleConditionParser.ExprAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprSign</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprSign([NotNull] RuleConditionParser.ExprSignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprSign</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprSign([NotNull] RuleConditionParser.ExprSignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprCompare</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprCompare([NotNull] RuleConditionParser.ExprCompareContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCompare</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprCompare([NotNull] RuleConditionParser.ExprCompareContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.compOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompOp([NotNull] RuleConditionParser.CompOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.compOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompOp([NotNull] RuleConditionParser.CompOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom([NotNull] RuleConditionParser.AtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom([NotNull] RuleConditionParser.AtomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] RuleConditionParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] RuleConditionParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] RuleConditionParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] RuleConditionParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] RuleConditionParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] RuleConditionParser.IdentifierContext context);
}
