//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RuleCondition.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRuleConditionListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class RuleConditionBaseListener : IRuleConditionListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStart([NotNull] RuleConditionParser.StartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStart([NotNull] RuleConditionParser.StartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAtom</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprAtom([NotNull] RuleConditionParser.ExprAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAtom</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprAtom([NotNull] RuleConditionParser.ExprAtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprOr([NotNull] RuleConditionParser.ExprOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprOr([NotNull] RuleConditionParser.ExprOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprNot</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprNot([NotNull] RuleConditionParser.ExprNotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNot</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprNot([NotNull] RuleConditionParser.ExprNotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprMul([NotNull] RuleConditionParser.ExprMulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprMul([NotNull] RuleConditionParser.ExprMulContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprPar</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprPar([NotNull] RuleConditionParser.ExprParContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPar</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprPar([NotNull] RuleConditionParser.ExprParContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprAdd([NotNull] RuleConditionParser.ExprAddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprAdd([NotNull] RuleConditionParser.ExprAddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprAnd([NotNull] RuleConditionParser.ExprAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprAnd([NotNull] RuleConditionParser.ExprAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprSign</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprSign([NotNull] RuleConditionParser.ExprSignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprSign</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprSign([NotNull] RuleConditionParser.ExprSignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprCompare</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprCompare([NotNull] RuleConditionParser.ExprCompareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCompare</c>
	/// labeled alternative in <see cref="RuleConditionParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprCompare([NotNull] RuleConditionParser.ExprCompareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.compOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompOp([NotNull] RuleConditionParser.CompOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.compOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompOp([NotNull] RuleConditionParser.CompOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtom([NotNull] RuleConditionParser.AtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtom([NotNull] RuleConditionParser.AtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstant([NotNull] RuleConditionParser.ConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstant([NotNull] RuleConditionParser.ConstantContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] RuleConditionParser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] RuleConditionParser.VariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RuleConditionParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] RuleConditionParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RuleConditionParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] RuleConditionParser.IdentifierContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
